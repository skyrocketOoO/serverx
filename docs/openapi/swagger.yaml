definitions:
  auth.ForgotPassword.Req:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  auth.Login.Req:
    properties:
      Name:
        type: string
      Password:
        type: string
    required:
    - Name
    - Password
    type: object
  auth.Login.Resp:
    properties:
      token:
        type: string
    type: object
  auth.Register.Req:
    properties:
      email:
        type: string
      nickName:
        type: string
    required:
    - email
    - nickName
    type: object
  controller.CreateUser.Req:
    properties:
      name:
        type: string
      password:
        type: string
    required:
    - name
    - password
    type: object
  controller.DeleteUser.Req:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  controller.GetUsers.Req:
    properties:
      pager:
        $ref: '#/definitions/util.Pager'
      sorter:
        items:
          $ref: '#/definitions/util.Sorter'
        type: array
    type: object
  controller.GetUsers.Resp:
    properties:
      count:
        type: integer
      data:
        items:
          $ref: '#/definitions/controller.GetUsers.User'
        type: array
    type: object
  controller.GetUsers.User:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  controller.Login.Req:
    properties:
      Name:
        type: string
      Password:
        type: string
    required:
    - Name
    - Password
    type: object
  controller.Login.Resp:
    properties:
      token:
        type: string
    type: object
  controller.Register.Req:
    properties:
      Name:
        maxLength: 32
        minLength: 6
        type: string
      Password:
        maxLength: 32
        minLength: 8
        type: string
    required:
    - Name
    - Password
    type: object
  controller.UpdateUser.Req:
    properties:
      id:
        type: integer
      name:
        type: string
    required:
    - id
    type: object
  domain.ErrResp:
    properties:
      error:
        type: string
      id:
        type: string
    type: object
  util.Pager:
    properties:
      number:
        example: 1
        minimum: 1
        type: integer
      size:
        example: 10
        minimum: 1
        type: integer
    required:
    - number
    - size
    type: object
  util.Sorter:
    properties:
      asc:
        example: false
        type: boolean
      field:
        example: Time
        type: string
    required:
    - asc
    - field
    type: object
info:
  contact: {}
paths:
  /Register:
    post:
      parameters:
      - description: Register User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.Register.Req'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrResp'
        "500":
          description: Internal Server Error
          schema:
            type: string
  /healthy:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ErrResp'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/domain.ErrResp'
      summary: Check the services are healthy
  /login:
    post:
      parameters:
      - description: Login User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.Login.Req'
      responses:
        "200":
          description: token
          schema:
            $ref: '#/definitions/auth.Login.Resp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrResp'
        "500":
          description: Internal Server Error
          schema:
            type: string
  /ping:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Check the server started
  /register:
    post:
      parameters:
      - description: Register
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controller.Register.Req'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrResp'
  /user/create:
    post:
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.CreateUser.Req'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrResp'
      security:
      - Bearer: []
      tags:
      - Alarm
  /user/delete:
    post:
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.DeleteUser.Req'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrResp'
      security:
      - Bearer: []
      tags:
      - Alarm
  /user/get:
    post:
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.GetUsers.Req'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.GetUsers.Resp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrResp'
      security:
      - Bearer: []
      tags:
      - Alarm
  /user/update:
    post:
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.UpdateUser.Req'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrResp'
      security:
      - Bearer: []
      tags:
      - Alarm
  /v1/forgotPassword:
    post:
      parameters:
      - description: Request body
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.ForgotPassword.Req'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrResp'
        "500":
          description: Internal Server Error
          schema:
            type: string
      tags:
      - Home
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
